from check_answers import lang_answer, course_answer, role_answer
import markups
from query import set_user_lang, upsert_settings, get_exercise
from exersise_handlers import ExersiseFactory


def _1_step_handler(bot, users_state, user_id: int, text: str):
    answer = lang_answer(bot, text)
    if answer:
        set_user_lang(user_id, answer[0])
        bot.send_message(user_id, f'–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {text}')

        users_state[user_id] = '2_step'
        bot.send_message(
            user_id, 
            "–°–º–µ–Ω–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è:", 
            reply_markup=markups.get_course_markup()
        )

    else:
        bot.send_message(
            user_id, 
            "–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –æ–±—É—á–µ–Ω–∏—è:", 
            reply_markup=markups.get_lang_markup()
        )

def _2_step_handler(bot, users_state, user_id: int, text: str):
    answer = course_answer(bot, text)
    if answer:
        upsert_settings(user_id, "course_id", answer[0])
        bot.send_message(user_id, f'–¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {text}')

        users_state[user_id] = 'main'
        bot.send_message(
            user_id, 
            "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", 
            reply_markup=markups.get_main_markup()
        )

    else:
        bot.send_message(
            user_id, 
            "–°–º–µ–Ω–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è:", 
            reply_markup=markups.get_course_markup()
        )

def main_menu_handler(bot, users_state, user_id: int, text: str):
    if text == '‚ÑπÔ∏è –ú–æ–¥—É–ª–∏':
        mrkp = markups.get_modules_markup(user_id)

        isEmpty = not mrkp.to_dict().get('inline_keyboard')
        
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–æ–¥—É–ª—å:"

        if isEmpty:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ —è–∑—ã–∫–∞ –∏ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :("

        bot.send_message(user_id, text, reply_markup=mrkp)

    elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        users_state[user_id] = 'settings'
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=markups.get_settings_markup())

    else:
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=markups.get_main_markup())


def lang_menu_handler(bot, users_state, user_id: int, text: str):
    answer = lang_answer(bot, text)
    if answer:
        set_user_lang(user_id, answer[0])
        bot.send_message(user_id, f'–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {text}')

        users_state[user_id] = 'settings'
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=markups.get_settings_markup())

    else:
        bot.send_message(user_id, "–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=markups.get_lang_markup())


def course_menu_handler(bot, users_state, user_id: int, text: str):
    answer = course_answer(bot, text)
    if answer:
        upsert_settings(user_id, "course_id", answer[0])
        bot.send_message(user_id, f'–¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {text}')

        users_state[user_id] = 'settings'
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=markups.get_settings_markup())

    else:
        bot.send_message(user_id, "–°–º–µ–Ω–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=markups.get_course_markup())

def settings_menu_handler(bot, users_state, user_id: int, text: str):
    if text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫":
        users_state[user_id] = 'lang_menu'
        bot.send_message(user_id, "–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=markups.get_lang_markup())
    
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è":
        users_state[user_id] = 'course_menu'
        bot.send_message(user_id, "–°–º–µ–Ω–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=markups.get_course_markup())

    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å (—Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)":
        users_state[user_id] = 'roles'
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å:", reply_markup=markups.get_roles_markup())
        
    else:
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=markups.get_settings_markup())

def roles_menu_handler(bot, users_state, user_id: int, text: str):
    answer = role_answer(bot, text)
    if answer:
        users_state[user_id] = 'settings'
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=markups.get_settings_markup())
        
    else:
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å:", reply_markup=markups.get_roles_markup())

def module_menu_handler(bot, user_id: int, module_id: int):
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ç–µ–º—É:", reply_markup=markups.get_themes_markup(module_id))

def theme_menu_handler(bot, users_state, user_id: int, text: str):
    state = str(users_state[user_id]).split('/')
    current_theme_id = state[1]
    current_exersise_id = state[2]

    ex = get_exercise(current_theme_id, current_exersise_id)

    if not ex:
        bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–∫—Ä—ã–ª–∏ —Ç–µ–º—É üòä")
        users_state[user_id] = 'main'
        return

    ExersiseFactory.create_exersise(ex, bot, user_id)

    next_exersise_id = ex[0]
    users_state[user_id] = f"theme/{current_theme_id}/{next_exersise_id}"